/*
* generated by Xtext
*/
grammar InternalOntoDSL;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package br.ufes.inf.nemo.ontouml.dsl.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package br.ufes.inf.nemo.ontouml.dsl.xtext.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import br.ufes.inf.nemo.ontouml.dsl.xtext.services.OntoDSLGrammarAccess;

}

@parser::members {

 	private OntoDSLGrammarAccess grammarAccess;
 	
    public InternalOntoDSLParser(TokenStream input, IAstFactory factory, OntoDSLGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("br/ufes/inf/nemo/ontouml/dsl/xtext/parser/antlr/internal/InternalOntoDSL.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected OntoDSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getModelRule(), currentNode); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getModelAccess().getDslModelAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getModelAccess().getDslModelAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'model' 
    {
        createLeafNode(grammarAccess.getModelAccess().getModelKeyword_1(), null); 
    }
(
(
		lv_name_2_0=RULE_ID
		{
			createLeafNode(grammarAccess.getModelAccess().getNameIDTerminalRuleCall_2_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_2_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getModelAccess().getSemicolonKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModelAccess().getPackageImportPackageImportParserRuleCall_4_0(), currentNode); 
	    }
		lv_packageImport_4_0=rulePackageImport		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"packageImport",
	        		lv_packageImport_4_0, 
	        		"PackageImport", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModelAccess().getPackagedElementPackageableElementParserRuleCall_5_0(), currentNode); 
	    }
		lv_packagedElement_5_0=rulePackageableElement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"packagedElement",
	        		lv_packagedElement_5_0, 
	        		"PackageableElement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
;





// Entry rule entryRulePackageableElement
entryRulePackageableElement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPackageableElementRule(), currentNode); }
	 iv_rulePackageableElement=rulePackageableElement 
	 { $current=$iv_rulePackageableElement.current; } 
	 EOF 
;

// Rule PackageableElement
rulePackageableElement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getPackageableElementAccess().getTypeParserRuleCall_0(), currentNode); 
    }
    this_Type_0=ruleType
    { 
        $current = $this_Type_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPackageableElementAccess().getEnumerationParserRuleCall_1(), currentNode); 
    }
    this_Enumeration_1=ruleEnumeration
    { 
        $current = $this_Enumeration_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPackageableElementAccess().getClassParserRuleCall_2(), currentNode); 
    }
    this_Class_2=ruleClass
    { 
        $current = $this_Class_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPackageableElementAccess().getAssociationParserRuleCall_3(), currentNode); 
    }
    this_Association_3=ruleAssociation
    { 
        $current = $this_Association_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPackageableElementAccess().getGeneralizationSetParserRuleCall_4(), currentNode); 
    }
    this_GeneralizationSet_4=ruleGeneralizationSet
    { 
        $current = $this_GeneralizationSet_4.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleClass
entryRuleClass returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getClassRule(), currentNode); }
	 iv_ruleClass=ruleClass 
	 { $current=$iv_ruleClass.current; } 
	 EOF 
;

// Rule Class
ruleClass returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getClassAccess().getKindParserRuleCall_0(), currentNode); 
    }
    this_Kind_0=ruleKind
    { 
        $current = $this_Kind_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getClassAccess().getQuantityParserRuleCall_1(), currentNode); 
    }
    this_Quantity_1=ruleQuantity
    { 
        $current = $this_Quantity_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getClassAccess().getCollectiveParserRuleCall_2(), currentNode); 
    }
    this_Collective_2=ruleCollective
    { 
        $current = $this_Collective_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getClassAccess().getSubKindParserRuleCall_3(), currentNode); 
    }
    this_SubKind_3=ruleSubKind
    { 
        $current = $this_SubKind_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getClassAccess().getCategoryParserRuleCall_4(), currentNode); 
    }
    this_Category_4=ruleCategory
    { 
        $current = $this_Category_4.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getClassAccess().getPhaseParserRuleCall_5(), currentNode); 
    }
    this_Phase_5=rulePhase
    { 
        $current = $this_Phase_5.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getClassAccess().getRoleParserRuleCall_6(), currentNode); 
    }
    this_Role_6=ruleRole
    { 
        $current = $this_Role_6.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getClassAccess().getMixinParserRuleCall_7(), currentNode); 
    }
    this_Mixin_7=ruleMixin
    { 
        $current = $this_Mixin_7.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getClassAccess().getRoleMixinParserRuleCall_8(), currentNode); 
    }
    this_RoleMixin_8=ruleRoleMixin
    { 
        $current = $this_RoleMixin_8.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getClassAccess().getModeParserRuleCall_9(), currentNode); 
    }
    this_Mode_9=ruleMode
    { 
        $current = $this_Mode_9.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getClassAccess().getRelatorParserRuleCall_10(), currentNode); 
    }
    this_Relator_10=ruleRelator
    { 
        $current = $this_Relator_10.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleAssociation
entryRuleAssociation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAssociationRule(), currentNode); }
	 iv_ruleAssociation=ruleAssociation 
	 { $current=$iv_ruleAssociation.current; } 
	 EOF 
;

// Rule Association
ruleAssociation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAssociationAccess().getCharacterizationParserRuleCall_0(), currentNode); 
    }
    this_Characterization_0=ruleCharacterization
    { 
        $current = $this_Characterization_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAssociationAccess().getMediationParserRuleCall_1(), currentNode); 
    }
    this_Mediation_1=ruleMediation
    { 
        $current = $this_Mediation_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAssociationAccess().getDerivationParserRuleCall_2(), currentNode); 
    }
    this_Derivation_2=ruleDerivation
    { 
        $current = $this_Derivation_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAssociationAccess().getFormalAssociationParserRuleCall_3(), currentNode); 
    }
    this_FormalAssociation_3=ruleFormalAssociation
    { 
        $current = $this_FormalAssociation_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAssociationAccess().getMaterialAssociationParserRuleCall_4(), currentNode); 
    }
    this_MaterialAssociation_4=ruleMaterialAssociation
    { 
        $current = $this_MaterialAssociation_4.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRulePackageImport
entryRulePackageImport returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPackageImportRule(), currentNode); }
	 iv_rulePackageImport=rulePackageImport 
	 { $current=$iv_rulePackageImport.current; } 
	 EOF 
;

// Rule PackageImport
rulePackageImport returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'import' 
    {
        createLeafNode(grammarAccess.getPackageImportAccess().getImportKeyword_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getPackageImportRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_STRING
	{
		createLeafNode(grammarAccess.getPackageImportAccess().getImportedPackagePackageCrossReference_1_0(), "importedPackage"); 
	}

)
)	';' 
    {
        createLeafNode(grammarAccess.getPackageImportAccess().getSemicolonKeyword_2(), null); 
    }
)
;





// Entry rule entryRuleKind
entryRuleKind returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getKindRule(), currentNode); }
	 iv_ruleKind=ruleKind 
	 { $current=$iv_ruleKind.current; } 
	 EOF 
;

// Rule Kind
ruleKind returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getKindAccess().getUnorderedGroup_0());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getKindAccess().getUnorderedGroup_0(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getKindAccess().getUnorderedGroup_0(), 0);
	 				}
					(
(
		lv_isActive_1_0=	'active' 
    {
        createLeafNode(grammarAccess.getKindAccess().getIsActiveActiveKeyword_0_0_0(), "isActive"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getKindRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isActive", true, "active", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getKindAccess().getUnorderedGroup_0());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getKindAccess().getUnorderedGroup_0(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getKindAccess().getUnorderedGroup_0(), 1);
	 				}
					(
(
		lv_isAbstract_2_0=	'abstract' 
    {
        createLeafNode(grammarAccess.getKindAccess().getIsAbstractAbstractKeyword_0_1_0(), "isAbstract"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getKindRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isAbstract", true, "abstract", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getKindAccess().getUnorderedGroup_0());
	 				}
 				)
			)  

		)*	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getKindAccess().getUnorderedGroup_0());
	}

)	'kind' 
    {
        createLeafNode(grammarAccess.getKindAccess().getKindKeyword_1(), null); 
    }
(
(
		lv_name_4_0=RULE_ID
		{
			createLeafNode(grammarAccess.getKindAccess().getNameIDTerminalRuleCall_2_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getKindRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_4_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	':' 
    {
        createLeafNode(grammarAccess.getKindAccess().getColonKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getKindAccess().getGeneralizationInlineGeneralizationParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_generalization_6_0=ruleInlineGeneralization		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getKindRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"generalization",
	        		lv_generalization_6_0, 
	        		"InlineGeneralization", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getKindAccess().getCommaKeyword_3_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getKindAccess().getGeneralizationInlineGeneralizationParserRuleCall_3_2_1_0(), currentNode); 
	    }
		lv_generalization_8_0=ruleInlineGeneralization		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getKindRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"generalization",
	        		lv_generalization_8_0, 
	        		"InlineGeneralization", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	'{' 
    {
        createLeafNode(grammarAccess.getKindAccess().getLeftCurlyBracketKeyword_4(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getKindAccess().getOwnedAttributeClassPropertyParserRuleCall_5_0_0(), currentNode); 
	    }
		lv_ownedAttribute_10_0=ruleClassProperty		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getKindRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedAttribute",
	        		lv_ownedAttribute_10_0, 
	        		"ClassProperty", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getKindAccess().getSemicolonKeyword_5_1(), null); 
    }
)*	'}' 
    {
        createLeafNode(grammarAccess.getKindAccess().getRightCurlyBracketKeyword_6(), null); 
    }
)
;





// Entry rule entryRuleQuantity
entryRuleQuantity returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getQuantityRule(), currentNode); }
	 iv_ruleQuantity=ruleQuantity 
	 { $current=$iv_ruleQuantity.current; } 
	 EOF 
;

// Rule Quantity
ruleQuantity returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getQuantityAccess().getUnorderedGroup_0());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getQuantityAccess().getUnorderedGroup_0(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getQuantityAccess().getUnorderedGroup_0(), 0);
	 				}
					(
(
		lv_isActive_1_0=	'active' 
    {
        createLeafNode(grammarAccess.getQuantityAccess().getIsActiveActiveKeyword_0_0_0(), "isActive"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getQuantityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isActive", true, "active", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getQuantityAccess().getUnorderedGroup_0());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getQuantityAccess().getUnorderedGroup_0(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getQuantityAccess().getUnorderedGroup_0(), 1);
	 				}
					(
(
		lv_isAbstract_2_0=	'abstract' 
    {
        createLeafNode(grammarAccess.getQuantityAccess().getIsAbstractAbstractKeyword_0_1_0(), "isAbstract"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getQuantityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isAbstract", true, "abstract", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getQuantityAccess().getUnorderedGroup_0());
	 				}
 				)
			)  

		)*	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getQuantityAccess().getUnorderedGroup_0());
	}

)	'quantity' 
    {
        createLeafNode(grammarAccess.getQuantityAccess().getQuantityKeyword_1(), null); 
    }
(
(
		lv_name_4_0=RULE_ID
		{
			createLeafNode(grammarAccess.getQuantityAccess().getNameIDTerminalRuleCall_2_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getQuantityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_4_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	':' 
    {
        createLeafNode(grammarAccess.getQuantityAccess().getColonKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getQuantityAccess().getGeneralizationInlineGeneralizationParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_generalization_6_0=ruleInlineGeneralization		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getQuantityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"generalization",
	        		lv_generalization_6_0, 
	        		"InlineGeneralization", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getQuantityAccess().getCommaKeyword_3_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getQuantityAccess().getGeneralizationInlineGeneralizationParserRuleCall_3_2_1_0(), currentNode); 
	    }
		lv_generalization_8_0=ruleInlineGeneralization		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getQuantityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"generalization",
	        		lv_generalization_8_0, 
	        		"InlineGeneralization", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	'{' 
    {
        createLeafNode(grammarAccess.getQuantityAccess().getLeftCurlyBracketKeyword_4(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getQuantityAccess().getOwnedAttributeClassPropertyParserRuleCall_5_0_0(), currentNode); 
	    }
		lv_ownedAttribute_10_0=ruleClassProperty		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getQuantityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedAttribute",
	        		lv_ownedAttribute_10_0, 
	        		"ClassProperty", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getQuantityAccess().getSemicolonKeyword_5_1(), null); 
    }
)*	'}' 
    {
        createLeafNode(grammarAccess.getQuantityAccess().getRightCurlyBracketKeyword_6(), null); 
    }
)
;





// Entry rule entryRuleCollective
entryRuleCollective returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCollectiveRule(), currentNode); }
	 iv_ruleCollective=ruleCollective 
	 { $current=$iv_ruleCollective.current; } 
	 EOF 
;

// Rule Collective
ruleCollective returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getCollectiveAccess().getUnorderedGroup_0());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getCollectiveAccess().getUnorderedGroup_0(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getCollectiveAccess().getUnorderedGroup_0(), 0);
	 				}
					(
(
		lv_isActive_1_0=	'active' 
    {
        createLeafNode(grammarAccess.getCollectiveAccess().getIsActiveActiveKeyword_0_0_0(), "isActive"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectiveRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isActive", true, "active", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getCollectiveAccess().getUnorderedGroup_0());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getCollectiveAccess().getUnorderedGroup_0(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getCollectiveAccess().getUnorderedGroup_0(), 1);
	 				}
					(
(
		lv_isExtensional_2_0=	'extensional' 
    {
        createLeafNode(grammarAccess.getCollectiveAccess().getIsExtensionalExtensionalKeyword_0_1_0(), "isExtensional"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectiveRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isExtensional", true, "extensional", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getCollectiveAccess().getUnorderedGroup_0());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getCollectiveAccess().getUnorderedGroup_0(), 2)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getCollectiveAccess().getUnorderedGroup_0(), 2);
	 				}
					(
(
		lv_isAbstract_3_0=	'abstract' 
    {
        createLeafNode(grammarAccess.getCollectiveAccess().getIsAbstractAbstractKeyword_0_2_0(), "isAbstract"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectiveRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isAbstract", true, "abstract", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getCollectiveAccess().getUnorderedGroup_0());
	 				}
 				)
			)  

		)*	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getCollectiveAccess().getUnorderedGroup_0());
	}

)	'collective' 
    {
        createLeafNode(grammarAccess.getCollectiveAccess().getCollectiveKeyword_1(), null); 
    }
(
(
		lv_name_5_0=RULE_ID
		{
			createLeafNode(grammarAccess.getCollectiveAccess().getNameIDTerminalRuleCall_2_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectiveRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_5_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	':' 
    {
        createLeafNode(grammarAccess.getCollectiveAccess().getColonKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCollectiveAccess().getGeneralizationInlineGeneralizationParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_generalization_7_0=ruleInlineGeneralization		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectiveRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"generalization",
	        		lv_generalization_7_0, 
	        		"InlineGeneralization", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getCollectiveAccess().getCommaKeyword_3_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCollectiveAccess().getGeneralizationInlineGeneralizationParserRuleCall_3_2_1_0(), currentNode); 
	    }
		lv_generalization_9_0=ruleInlineGeneralization		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectiveRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"generalization",
	        		lv_generalization_9_0, 
	        		"InlineGeneralization", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	'{' 
    {
        createLeafNode(grammarAccess.getCollectiveAccess().getLeftCurlyBracketKeyword_4(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCollectiveAccess().getOwnedAttributeClassPropertyParserRuleCall_5_0_0(), currentNode); 
	    }
		lv_ownedAttribute_11_0=ruleClassProperty		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectiveRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedAttribute",
	        		lv_ownedAttribute_11_0, 
	        		"ClassProperty", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getCollectiveAccess().getSemicolonKeyword_5_1(), null); 
    }
)*	'}' 
    {
        createLeafNode(grammarAccess.getCollectiveAccess().getRightCurlyBracketKeyword_6(), null); 
    }
)
;





// Entry rule entryRuleSubKind
entryRuleSubKind returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSubKindRule(), currentNode); }
	 iv_ruleSubKind=ruleSubKind 
	 { $current=$iv_ruleSubKind.current; } 
	 EOF 
;

// Rule SubKind
ruleSubKind returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getSubKindAccess().getUnorderedGroup_0());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getSubKindAccess().getUnorderedGroup_0(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getSubKindAccess().getUnorderedGroup_0(), 0);
	 				}
					(
(
		lv_isActive_1_0=	'active' 
    {
        createLeafNode(grammarAccess.getSubKindAccess().getIsActiveActiveKeyword_0_0_0(), "isActive"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSubKindRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isActive", true, "active", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getSubKindAccess().getUnorderedGroup_0());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getSubKindAccess().getUnorderedGroup_0(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getSubKindAccess().getUnorderedGroup_0(), 1);
	 				}
					(
(
		lv_isAbstract_2_0=	'abstract' 
    {
        createLeafNode(grammarAccess.getSubKindAccess().getIsAbstractAbstractKeyword_0_1_0(), "isAbstract"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSubKindRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isAbstract", true, "abstract", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getSubKindAccess().getUnorderedGroup_0());
	 				}
 				)
			)  

		)*	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getSubKindAccess().getUnorderedGroup_0());
	}

)	'subKind' 
    {
        createLeafNode(grammarAccess.getSubKindAccess().getSubKindKeyword_1(), null); 
    }
(
(
		lv_name_4_0=RULE_ID
		{
			createLeafNode(grammarAccess.getSubKindAccess().getNameIDTerminalRuleCall_2_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSubKindRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_4_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	':' 
    {
        createLeafNode(grammarAccess.getSubKindAccess().getColonKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSubKindAccess().getGeneralizationInlineGeneralizationParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_generalization_6_0=ruleInlineGeneralization		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSubKindRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"generalization",
	        		lv_generalization_6_0, 
	        		"InlineGeneralization", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getSubKindAccess().getCommaKeyword_3_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSubKindAccess().getGeneralizationInlineGeneralizationParserRuleCall_3_2_1_0(), currentNode); 
	    }
		lv_generalization_8_0=ruleInlineGeneralization		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSubKindRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"generalization",
	        		lv_generalization_8_0, 
	        		"InlineGeneralization", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	'{' 
    {
        createLeafNode(grammarAccess.getSubKindAccess().getLeftCurlyBracketKeyword_4(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSubKindAccess().getOwnedAttributeClassPropertyParserRuleCall_5_0_0(), currentNode); 
	    }
		lv_ownedAttribute_10_0=ruleClassProperty		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSubKindRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedAttribute",
	        		lv_ownedAttribute_10_0, 
	        		"ClassProperty", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getSubKindAccess().getSemicolonKeyword_5_1(), null); 
    }
)*	'}' 
    {
        createLeafNode(grammarAccess.getSubKindAccess().getRightCurlyBracketKeyword_6(), null); 
    }
)
;





// Entry rule entryRuleCategory
entryRuleCategory returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCategoryRule(), currentNode); }
	 iv_ruleCategory=ruleCategory 
	 { $current=$iv_ruleCategory.current; } 
	 EOF 
;

// Rule Category
ruleCategory returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getCategoryAccess().getUnorderedGroup_0());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getCategoryAccess().getUnorderedGroup_0(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getCategoryAccess().getUnorderedGroup_0(), 0);
	 				}
					(
(
		lv_isActive_1_0=	'active' 
    {
        createLeafNode(grammarAccess.getCategoryAccess().getIsActiveActiveKeyword_0_0_0(), "isActive"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCategoryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isActive", true, "active", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getCategoryAccess().getUnorderedGroup_0());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getCategoryAccess().getUnorderedGroup_0(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getCategoryAccess().getUnorderedGroup_0(), 1);
	 				}
					(
(
		lv_isAbstract_2_0=	'abstract' 
    {
        createLeafNode(grammarAccess.getCategoryAccess().getIsAbstractAbstractKeyword_0_1_0(), "isAbstract"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCategoryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isAbstract", true, "abstract", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getCategoryAccess().getUnorderedGroup_0());
	 				}
 				)
			)  

		)+
	  	{getUnorderedGroupHelper().canLeave(grammarAccess.getCategoryAccess().getUnorderedGroup_0())}?	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getCategoryAccess().getUnorderedGroup_0());
	}

)	'category' 
    {
        createLeafNode(grammarAccess.getCategoryAccess().getCategoryKeyword_1(), null); 
    }
(
(
		lv_name_4_0=RULE_ID
		{
			createLeafNode(grammarAccess.getCategoryAccess().getNameIDTerminalRuleCall_2_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCategoryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_4_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	':' 
    {
        createLeafNode(grammarAccess.getCategoryAccess().getColonKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCategoryAccess().getGeneralizationInlineGeneralizationParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_generalization_6_0=ruleInlineGeneralization		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCategoryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"generalization",
	        		lv_generalization_6_0, 
	        		"InlineGeneralization", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getCategoryAccess().getCommaKeyword_3_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCategoryAccess().getGeneralizationInlineGeneralizationParserRuleCall_3_2_1_0(), currentNode); 
	    }
		lv_generalization_8_0=ruleInlineGeneralization		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCategoryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"generalization",
	        		lv_generalization_8_0, 
	        		"InlineGeneralization", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	'{' 
    {
        createLeafNode(grammarAccess.getCategoryAccess().getLeftCurlyBracketKeyword_4(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCategoryAccess().getOwnedAttributeClassPropertyParserRuleCall_5_0_0(), currentNode); 
	    }
		lv_ownedAttribute_10_0=ruleClassProperty		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCategoryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedAttribute",
	        		lv_ownedAttribute_10_0, 
	        		"ClassProperty", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getCategoryAccess().getSemicolonKeyword_5_1(), null); 
    }
)*	'}' 
    {
        createLeafNode(grammarAccess.getCategoryAccess().getRightCurlyBracketKeyword_6(), null); 
    }
)
;





// Entry rule entryRulePhase
entryRulePhase returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPhaseRule(), currentNode); }
	 iv_rulePhase=rulePhase 
	 { $current=$iv_rulePhase.current; } 
	 EOF 
;

// Rule Phase
rulePhase returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getPhaseAccess().getUnorderedGroup_0());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getPhaseAccess().getUnorderedGroup_0(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getPhaseAccess().getUnorderedGroup_0(), 0);
	 				}
					(
(
		lv_isActive_1_0=	'active' 
    {
        createLeafNode(grammarAccess.getPhaseAccess().getIsActiveActiveKeyword_0_0_0(), "isActive"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPhaseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isActive", true, "active", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getPhaseAccess().getUnorderedGroup_0());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getPhaseAccess().getUnorderedGroup_0(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getPhaseAccess().getUnorderedGroup_0(), 1);
	 				}
					(
(
		lv_isAbstract_2_0=	'abstract' 
    {
        createLeafNode(grammarAccess.getPhaseAccess().getIsAbstractAbstractKeyword_0_1_0(), "isAbstract"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPhaseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isAbstract", true, "abstract", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getPhaseAccess().getUnorderedGroup_0());
	 				}
 				)
			)  

		)*	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getPhaseAccess().getUnorderedGroup_0());
	}

)	'phase' 
    {
        createLeafNode(grammarAccess.getPhaseAccess().getPhaseKeyword_1(), null); 
    }
(
(
		lv_name_4_0=RULE_ID
		{
			createLeafNode(grammarAccess.getPhaseAccess().getNameIDTerminalRuleCall_2_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPhaseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_4_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	':' 
    {
        createLeafNode(grammarAccess.getPhaseAccess().getColonKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPhaseAccess().getGeneralizationInlineGeneralizationParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_generalization_6_0=ruleInlineGeneralization		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPhaseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"generalization",
	        		lv_generalization_6_0, 
	        		"InlineGeneralization", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getPhaseAccess().getCommaKeyword_3_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPhaseAccess().getGeneralizationInlineGeneralizationParserRuleCall_3_2_1_0(), currentNode); 
	    }
		lv_generalization_8_0=ruleInlineGeneralization		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPhaseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"generalization",
	        		lv_generalization_8_0, 
	        		"InlineGeneralization", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	'{' 
    {
        createLeafNode(grammarAccess.getPhaseAccess().getLeftCurlyBracketKeyword_4(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPhaseAccess().getOwnedAttributeClassPropertyParserRuleCall_5_0_0(), currentNode); 
	    }
		lv_ownedAttribute_10_0=ruleClassProperty		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPhaseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedAttribute",
	        		lv_ownedAttribute_10_0, 
	        		"ClassProperty", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getPhaseAccess().getSemicolonKeyword_5_1(), null); 
    }
)*	'}' 
    {
        createLeafNode(grammarAccess.getPhaseAccess().getRightCurlyBracketKeyword_6(), null); 
    }
)
;





// Entry rule entryRuleRole
entryRuleRole returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRoleRule(), currentNode); }
	 iv_ruleRole=ruleRole 
	 { $current=$iv_ruleRole.current; } 
	 EOF 
;

// Rule Role
ruleRole returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getRoleAccess().getUnorderedGroup_0());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getRoleAccess().getUnorderedGroup_0(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getRoleAccess().getUnorderedGroup_0(), 0);
	 				}
					(
(
		lv_isActive_1_0=	'active' 
    {
        createLeafNode(grammarAccess.getRoleAccess().getIsActiveActiveKeyword_0_0_0(), "isActive"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRoleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isActive", true, "active", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getRoleAccess().getUnorderedGroup_0());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getRoleAccess().getUnorderedGroup_0(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getRoleAccess().getUnorderedGroup_0(), 1);
	 				}
					(
(
		lv_isAbstract_2_0=	'abstract' 
    {
        createLeafNode(grammarAccess.getRoleAccess().getIsAbstractAbstractKeyword_0_1_0(), "isAbstract"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRoleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isAbstract", true, "abstract", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getRoleAccess().getUnorderedGroup_0());
	 				}
 				)
			)  

		)*	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getRoleAccess().getUnorderedGroup_0());
	}

)	'role' 
    {
        createLeafNode(grammarAccess.getRoleAccess().getRoleKeyword_1(), null); 
    }
(
(
		lv_name_4_0=RULE_ID
		{
			createLeafNode(grammarAccess.getRoleAccess().getNameIDTerminalRuleCall_2_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRoleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_4_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	':' 
    {
        createLeafNode(grammarAccess.getRoleAccess().getColonKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRoleAccess().getGeneralizationInlineGeneralizationParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_generalization_6_0=ruleInlineGeneralization		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRoleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"generalization",
	        		lv_generalization_6_0, 
	        		"InlineGeneralization", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getRoleAccess().getCommaKeyword_3_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRoleAccess().getGeneralizationInlineGeneralizationParserRuleCall_3_2_1_0(), currentNode); 
	    }
		lv_generalization_8_0=ruleInlineGeneralization		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRoleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"generalization",
	        		lv_generalization_8_0, 
	        		"InlineGeneralization", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	'{' 
    {
        createLeafNode(grammarAccess.getRoleAccess().getLeftCurlyBracketKeyword_4(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRoleAccess().getOwnedAttributeClassPropertyParserRuleCall_5_0_0(), currentNode); 
	    }
		lv_ownedAttribute_10_0=ruleClassProperty		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRoleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedAttribute",
	        		lv_ownedAttribute_10_0, 
	        		"ClassProperty", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getRoleAccess().getSemicolonKeyword_5_1(), null); 
    }
)*	'}' 
    {
        createLeafNode(grammarAccess.getRoleAccess().getRightCurlyBracketKeyword_6(), null); 
    }
)
;





// Entry rule entryRuleMixin
entryRuleMixin returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMixinRule(), currentNode); }
	 iv_ruleMixin=ruleMixin 
	 { $current=$iv_ruleMixin.current; } 
	 EOF 
;

// Rule Mixin
ruleMixin returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getMixinAccess().getUnorderedGroup_0());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getMixinAccess().getUnorderedGroup_0(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getMixinAccess().getUnorderedGroup_0(), 0);
	 				}
					(
(
		lv_isActive_1_0=	'active' 
    {
        createLeafNode(grammarAccess.getMixinAccess().getIsActiveActiveKeyword_0_0_0(), "isActive"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMixinRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isActive", true, "active", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getMixinAccess().getUnorderedGroup_0());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getMixinAccess().getUnorderedGroup_0(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getMixinAccess().getUnorderedGroup_0(), 1);
	 				}
					(
(
		lv_isAbstract_2_0=	'abstract' 
    {
        createLeafNode(grammarAccess.getMixinAccess().getIsAbstractAbstractKeyword_0_1_0(), "isAbstract"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMixinRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isAbstract", true, "abstract", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getMixinAccess().getUnorderedGroup_0());
	 				}
 				)
			)  

		)+
	  	{getUnorderedGroupHelper().canLeave(grammarAccess.getMixinAccess().getUnorderedGroup_0())}?	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getMixinAccess().getUnorderedGroup_0());
	}

)	'mixin' 
    {
        createLeafNode(grammarAccess.getMixinAccess().getMixinKeyword_1(), null); 
    }
(
(
		lv_name_4_0=RULE_ID
		{
			createLeafNode(grammarAccess.getMixinAccess().getNameIDTerminalRuleCall_2_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMixinRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_4_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	':' 
    {
        createLeafNode(grammarAccess.getMixinAccess().getColonKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMixinAccess().getGeneralizationInlineGeneralizationParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_generalization_6_0=ruleInlineGeneralization		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMixinRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"generalization",
	        		lv_generalization_6_0, 
	        		"InlineGeneralization", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getMixinAccess().getCommaKeyword_3_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMixinAccess().getGeneralizationInlineGeneralizationParserRuleCall_3_2_1_0(), currentNode); 
	    }
		lv_generalization_8_0=ruleInlineGeneralization		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMixinRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"generalization",
	        		lv_generalization_8_0, 
	        		"InlineGeneralization", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	'{' 
    {
        createLeafNode(grammarAccess.getMixinAccess().getLeftCurlyBracketKeyword_4(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMixinAccess().getOwnedAttributeClassPropertyParserRuleCall_5_0_0(), currentNode); 
	    }
		lv_ownedAttribute_10_0=ruleClassProperty		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMixinRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedAttribute",
	        		lv_ownedAttribute_10_0, 
	        		"ClassProperty", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getMixinAccess().getSemicolonKeyword_5_1(), null); 
    }
)*	'}' 
    {
        createLeafNode(grammarAccess.getMixinAccess().getRightCurlyBracketKeyword_6(), null); 
    }
)
;





// Entry rule entryRuleRoleMixin
entryRuleRoleMixin returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRoleMixinRule(), currentNode); }
	 iv_ruleRoleMixin=ruleRoleMixin 
	 { $current=$iv_ruleRoleMixin.current; } 
	 EOF 
;

// Rule RoleMixin
ruleRoleMixin returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getRoleMixinAccess().getUnorderedGroup_0());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getRoleMixinAccess().getUnorderedGroup_0(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getRoleMixinAccess().getUnorderedGroup_0(), 0);
	 				}
					(
(
		lv_isActive_1_0=	'active' 
    {
        createLeafNode(grammarAccess.getRoleMixinAccess().getIsActiveActiveKeyword_0_0_0(), "isActive"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRoleMixinRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isActive", true, "active", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getRoleMixinAccess().getUnorderedGroup_0());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getRoleMixinAccess().getUnorderedGroup_0(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getRoleMixinAccess().getUnorderedGroup_0(), 1);
	 				}
					(
(
		lv_isAbstract_2_0=	'abstract' 
    {
        createLeafNode(grammarAccess.getRoleMixinAccess().getIsAbstractAbstractKeyword_0_1_0(), "isAbstract"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRoleMixinRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isAbstract", true, "abstract", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getRoleMixinAccess().getUnorderedGroup_0());
	 				}
 				)
			)  

		)*	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getRoleMixinAccess().getUnorderedGroup_0());
	}

)	'roleMixin' 
    {
        createLeafNode(grammarAccess.getRoleMixinAccess().getRoleMixinKeyword_1(), null); 
    }
(
(
		lv_name_4_0=RULE_ID
		{
			createLeafNode(grammarAccess.getRoleMixinAccess().getNameIDTerminalRuleCall_2_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRoleMixinRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_4_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	':' 
    {
        createLeafNode(grammarAccess.getRoleMixinAccess().getColonKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRoleMixinAccess().getGeneralizationInlineGeneralizationParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_generalization_6_0=ruleInlineGeneralization		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRoleMixinRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"generalization",
	        		lv_generalization_6_0, 
	        		"InlineGeneralization", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getRoleMixinAccess().getCommaKeyword_3_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRoleMixinAccess().getGeneralizationInlineGeneralizationParserRuleCall_3_2_1_0(), currentNode); 
	    }
		lv_generalization_8_0=ruleInlineGeneralization		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRoleMixinRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"generalization",
	        		lv_generalization_8_0, 
	        		"InlineGeneralization", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	'{' 
    {
        createLeafNode(grammarAccess.getRoleMixinAccess().getLeftCurlyBracketKeyword_4(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRoleMixinAccess().getOwnedAttributeClassPropertyParserRuleCall_5_0_0(), currentNode); 
	    }
		lv_ownedAttribute_10_0=ruleClassProperty		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRoleMixinRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedAttribute",
	        		lv_ownedAttribute_10_0, 
	        		"ClassProperty", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getRoleMixinAccess().getSemicolonKeyword_5_1(), null); 
    }
)*	'}' 
    {
        createLeafNode(grammarAccess.getRoleMixinAccess().getRightCurlyBracketKeyword_6(), null); 
    }
)
;





// Entry rule entryRuleMode
entryRuleMode returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getModeRule(), currentNode); }
	 iv_ruleMode=ruleMode 
	 { $current=$iv_ruleMode.current; } 
	 EOF 
;

// Rule Mode
ruleMode returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getModeAccess().getUnorderedGroup_0());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getModeAccess().getUnorderedGroup_0(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getModeAccess().getUnorderedGroup_0(), 0);
	 				}
					(
(
		lv_isActive_1_0=	'active' 
    {
        createLeafNode(grammarAccess.getModeAccess().getIsActiveActiveKeyword_0_0_0(), "isActive"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isActive", true, "active", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getModeAccess().getUnorderedGroup_0());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getModeAccess().getUnorderedGroup_0(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getModeAccess().getUnorderedGroup_0(), 1);
	 				}
					(
(
		lv_isAbstract_2_0=	'abstract' 
    {
        createLeafNode(grammarAccess.getModeAccess().getIsAbstractAbstractKeyword_0_1_0(), "isAbstract"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isAbstract", true, "abstract", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getModeAccess().getUnorderedGroup_0());
	 				}
 				)
			)  

		)*	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getModeAccess().getUnorderedGroup_0());
	}

)	'mode' 
    {
        createLeafNode(grammarAccess.getModeAccess().getModeKeyword_1(), null); 
    }
(
(
		lv_name_4_0=RULE_ID
		{
			createLeafNode(grammarAccess.getModeAccess().getNameIDTerminalRuleCall_2_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_4_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	':' 
    {
        createLeafNode(grammarAccess.getModeAccess().getColonKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModeAccess().getGeneralizationInlineGeneralizationParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_generalization_6_0=ruleInlineGeneralization		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"generalization",
	        		lv_generalization_6_0, 
	        		"InlineGeneralization", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getModeAccess().getCommaKeyword_3_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModeAccess().getGeneralizationInlineGeneralizationParserRuleCall_3_2_1_0(), currentNode); 
	    }
		lv_generalization_8_0=ruleInlineGeneralization		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"generalization",
	        		lv_generalization_8_0, 
	        		"InlineGeneralization", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	'{' 
    {
        createLeafNode(grammarAccess.getModeAccess().getLeftCurlyBracketKeyword_4(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModeAccess().getOwnedAttributeClassPropertyParserRuleCall_5_0_0(), currentNode); 
	    }
		lv_ownedAttribute_10_0=ruleClassProperty		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedAttribute",
	        		lv_ownedAttribute_10_0, 
	        		"ClassProperty", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getModeAccess().getSemicolonKeyword_5_1(), null); 
    }
)*	'}' 
    {
        createLeafNode(grammarAccess.getModeAccess().getRightCurlyBracketKeyword_6(), null); 
    }
)
;





// Entry rule entryRuleRelator
entryRuleRelator returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRelatorRule(), currentNode); }
	 iv_ruleRelator=ruleRelator 
	 { $current=$iv_ruleRelator.current; } 
	 EOF 
;

// Rule Relator
ruleRelator returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getRelatorAccess().getUnorderedGroup_0());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getRelatorAccess().getUnorderedGroup_0(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getRelatorAccess().getUnorderedGroup_0(), 0);
	 				}
					(
(
		lv_isActive_1_0=	'active' 
    {
        createLeafNode(grammarAccess.getRelatorAccess().getIsActiveActiveKeyword_0_0_0(), "isActive"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelatorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isActive", true, "active", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getRelatorAccess().getUnorderedGroup_0());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getRelatorAccess().getUnorderedGroup_0(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getRelatorAccess().getUnorderedGroup_0(), 1);
	 				}
					(
(
		lv_isAbstract_2_0=	'abstract' 
    {
        createLeafNode(grammarAccess.getRelatorAccess().getIsAbstractAbstractKeyword_0_1_0(), "isAbstract"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelatorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isAbstract", true, "abstract", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getRelatorAccess().getUnorderedGroup_0());
	 				}
 				)
			)  

		)*	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getRelatorAccess().getUnorderedGroup_0());
	}

)	'relator' 
    {
        createLeafNode(grammarAccess.getRelatorAccess().getRelatorKeyword_1(), null); 
    }
(
(
		lv_name_4_0=RULE_ID
		{
			createLeafNode(grammarAccess.getRelatorAccess().getNameIDTerminalRuleCall_2_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelatorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_4_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	':' 
    {
        createLeafNode(grammarAccess.getRelatorAccess().getColonKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRelatorAccess().getGeneralizationInlineGeneralizationParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_generalization_6_0=ruleInlineGeneralization		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelatorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"generalization",
	        		lv_generalization_6_0, 
	        		"InlineGeneralization", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getRelatorAccess().getCommaKeyword_3_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRelatorAccess().getGeneralizationInlineGeneralizationParserRuleCall_3_2_1_0(), currentNode); 
	    }
		lv_generalization_8_0=ruleInlineGeneralization		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelatorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"generalization",
	        		lv_generalization_8_0, 
	        		"InlineGeneralization", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	'{' 
    {
        createLeafNode(grammarAccess.getRelatorAccess().getLeftCurlyBracketKeyword_4(), null); 
    }
	'mediates' 
    {
        createLeafNode(grammarAccess.getRelatorAccess().getMediatesKeyword_5(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRelatorAccess().getMediationsSimpleMediationParserRuleCall_6_0(), currentNode); 
	    }
		lv_mediations_11_0=ruleSimpleMediation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelatorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"mediations",
	        		lv_mediations_11_0, 
	        		"SimpleMediation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'mediates' 
    {
        createLeafNode(grammarAccess.getRelatorAccess().getMediatesKeyword_7_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRelatorAccess().getMediationsSimpleMediationParserRuleCall_7_1_0(), currentNode); 
	    }
		lv_mediations_13_0=ruleSimpleMediation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelatorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"mediations",
	        		lv_mediations_13_0, 
	        		"SimpleMediation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))+((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRelatorAccess().getOwnedAttributeClassPropertyParserRuleCall_8_0_0(), currentNode); 
	    }
		lv_ownedAttribute_14_0=ruleClassProperty		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelatorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedAttribute",
	        		lv_ownedAttribute_14_0, 
	        		"ClassProperty", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getRelatorAccess().getSemicolonKeyword_8_1(), null); 
    }
)*	'}' 
    {
        createLeafNode(grammarAccess.getRelatorAccess().getRightCurlyBracketKeyword_9(), null); 
    }
)
;





// Entry rule entryRuleCardinality
entryRuleCardinality returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCardinalityRule(), currentNode); }
	 iv_ruleCardinality=ruleCardinality 
	 { $current=$iv_ruleCardinality.current; } 
	 EOF 
;

// Rule Cardinality
ruleCardinality returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getCardinalityAccess().getCardinalityImplParserRuleCall(), currentNode); 
    }
    this_CardinalityImpl_0=ruleCardinalityImpl
    { 
        $current = $this_CardinalityImpl_0.current; 
        currentNode = currentNode.getParent();
    }

;





// Entry rule entryRuleCardinalityImpl
entryRuleCardinalityImpl returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCardinalityImplRule(), currentNode); }
	 iv_ruleCardinalityImpl=ruleCardinalityImpl 
	 { $current=$iv_ruleCardinalityImpl.current; } 
	 EOF 
;

// Rule CardinalityImpl
ruleCardinalityImpl returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'[' 
    {
        createLeafNode(grammarAccess.getCardinalityImplAccess().getLeftSquareBracketKeyword_0(), null); 
    }
(
(
		lv_lower_1_0=RULE_INT
		{
			createLeafNode(grammarAccess.getCardinalityImplAccess().getLowerINTTerminalRuleCall_1_0(), "lower"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCardinalityImplRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"lower",
	        		lv_lower_1_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'..' 
    {
        createLeafNode(grammarAccess.getCardinalityImplAccess().getFullStopFullStopKeyword_2(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCardinalityImplAccess().getUpperUnlimitedNaturalValueParserRuleCall_3_0_0(), currentNode); 
	    }
		lv_upper_3_0=ruleUnlimitedNaturalValue		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCardinalityImplRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"upper",
	        		lv_upper_3_0, 
	        		"UnlimitedNaturalValue", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		lv_upper_4_0=RULE_INT
		{
			createLeafNode(grammarAccess.getCardinalityImplAccess().getUpperINTTerminalRuleCall_3_1_0(), "upper"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCardinalityImplRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"upper",
	        		lv_upper_4_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))	']' 
    {
        createLeafNode(grammarAccess.getCardinalityImplAccess().getRightSquareBracketKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleSimpleMediation
entryRuleSimpleMediation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSimpleMediationRule(), currentNode); }
	 iv_ruleSimpleMediation=ruleSimpleMediation 
	 { $current=$iv_ruleSimpleMediation.current; } 
	 EOF 
;

// Rule SimpleMediation
ruleSimpleMediation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'as' 
    {
        createLeafNode(grammarAccess.getSimpleMediationAccess().getAsKeyword_0_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getSimpleMediationAccess().getNameIDTerminalRuleCall_0_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSimpleMediationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSimpleMediationAccess().getCardinalityCardinalityParserRuleCall_1_0(), currentNode); 
	    }
		lv_cardinality_2_0=ruleCardinality		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSimpleMediationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"cardinality",
	        		lv_cardinality_2_0, 
	        		"Cardinality", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	'->' 
    {
        createLeafNode(grammarAccess.getSimpleMediationAccess().getHyphenMinusGreaterThanSignKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSimpleMediationAccess().getMediatedAnonymousPropertyDefinitionParserRuleCall_3_0(), currentNode); 
	    }
		lv_mediated_4_0=ruleAnonymousPropertyDefinition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSimpleMediationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"mediated",
	        		lv_mediated_4_0, 
	        		"AnonymousPropertyDefinition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleCharacterization
entryRuleCharacterization returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCharacterizationRule(), currentNode); }
	 iv_ruleCharacterization=ruleCharacterization 
	 { $current=$iv_ruleCharacterization.current; } 
	 EOF 
;

// Rule Characterization
ruleCharacterization returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'characterization' 
    {
        createLeafNode(grammarAccess.getCharacterizationAccess().getCharacterizationKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getCharacterizationAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCharacterizationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(	':' 
    {
        createLeafNode(grammarAccess.getCharacterizationAccess().getColonKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCharacterizationAccess().getGeneralizationInlineGeneralizationParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_generalization_3_0=ruleInlineGeneralization		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCharacterizationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"generalization",
	        		lv_generalization_3_0, 
	        		"InlineGeneralization", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getCharacterizationAccess().getCommaKeyword_2_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCharacterizationAccess().getGeneralizationInlineGeneralizationParserRuleCall_2_2_1_0(), currentNode); 
	    }
		lv_generalization_5_0=ruleInlineGeneralization		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCharacterizationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"generalization",
	        		lv_generalization_5_0, 
	        		"InlineGeneralization", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	'{' 
    {
        createLeafNode(grammarAccess.getCharacterizationAccess().getLeftCurlyBracketKeyword_3(), null); 
    }
	'mode:' 
    {
        createLeafNode(grammarAccess.getCharacterizationAccess().getModeKeyword_4(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCharacterizationAccess().getOwnedEndInlinePropertyDefinitionParserRuleCall_5_0_0(), currentNode); 
	    }
		lv_ownedEnd_8_0=ruleInlinePropertyDefinition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCharacterizationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedEnd",
	        		lv_ownedEnd_8_0, 
	        		"InlinePropertyDefinition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getCharacterizationAccess().getSemicolonKeyword_5_1(), null); 
    }
)	'characterized:' 
    {
        createLeafNode(grammarAccess.getCharacterizationAccess().getCharacterizedKeyword_6(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCharacterizationAccess().getOwnedEndInlinePropertyDefinitionParserRuleCall_7_0_0(), currentNode); 
	    }
		lv_ownedEnd_11_0=ruleInlinePropertyDefinition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCharacterizationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedEnd",
	        		lv_ownedEnd_11_0, 
	        		"InlinePropertyDefinition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getCharacterizationAccess().getSemicolonKeyword_7_1(), null); 
    }
)	'}' 
    {
        createLeafNode(grammarAccess.getCharacterizationAccess().getRightCurlyBracketKeyword_8(), null); 
    }
)
;





// Entry rule entryRuleMediation
entryRuleMediation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMediationRule(), currentNode); }
	 iv_ruleMediation=ruleMediation 
	 { $current=$iv_ruleMediation.current; } 
	 EOF 
;

// Rule Mediation
ruleMediation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'mediation' 
    {
        createLeafNode(grammarAccess.getMediationAccess().getMediationKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getMediationAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMediationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(	':' 
    {
        createLeafNode(grammarAccess.getMediationAccess().getColonKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMediationAccess().getGeneralizationInlineGeneralizationParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_generalization_3_0=ruleInlineGeneralization		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMediationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"generalization",
	        		lv_generalization_3_0, 
	        		"InlineGeneralization", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getMediationAccess().getCommaKeyword_2_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMediationAccess().getGeneralizationInlineGeneralizationParserRuleCall_2_2_1_0(), currentNode); 
	    }
		lv_generalization_5_0=ruleInlineGeneralization		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMediationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"generalization",
	        		lv_generalization_5_0, 
	        		"InlineGeneralization", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	'{' 
    {
        createLeafNode(grammarAccess.getMediationAccess().getLeftCurlyBracketKeyword_3(), null); 
    }
((	'relator:' 
    {
        createLeafNode(grammarAccess.getMediationAccess().getRelatorKeyword_4_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMediationAccess().getOwnedEndInlinePropertyDefinitionParserRuleCall_4_0_1_0(), currentNode); 
	    }
		lv_ownedEnd_8_0=ruleInlinePropertyDefinition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMediationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedEnd",
	        		lv_ownedEnd_8_0, 
	        		"InlinePropertyDefinition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getMediationAccess().getSemicolonKeyword_4_0_2(), null); 
    }
)(	'mediated:' 
    {
        createLeafNode(grammarAccess.getMediationAccess().getMediatedKeyword_4_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMediationAccess().getOwnedEndInlinePropertyDefinitionParserRuleCall_4_1_1_0(), currentNode); 
	    }
		lv_ownedEnd_11_0=ruleInlinePropertyDefinition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMediationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedEnd",
	        		lv_ownedEnd_11_0, 
	        		"InlinePropertyDefinition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getMediationAccess().getSemicolonKeyword_4_1_2(), null); 
    }
))	'}' 
    {
        createLeafNode(grammarAccess.getMediationAccess().getRightCurlyBracketKeyword_5(), null); 
    }
)
;





// Entry rule entryRuleDerivation
entryRuleDerivation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDerivationRule(), currentNode); }
	 iv_ruleDerivation=ruleDerivation 
	 { $current=$iv_ruleDerivation.current; } 
	 EOF 
;

// Rule Derivation
ruleDerivation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'derivation' 
    {
        createLeafNode(grammarAccess.getDerivationAccess().getDerivationKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getDerivationAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDerivationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(	':' 
    {
        createLeafNode(grammarAccess.getDerivationAccess().getColonKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDerivationAccess().getGeneralizationInlineGeneralizationParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_generalization_3_0=ruleInlineGeneralization		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDerivationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"generalization",
	        		lv_generalization_3_0, 
	        		"InlineGeneralization", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getDerivationAccess().getCommaKeyword_2_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDerivationAccess().getGeneralizationInlineGeneralizationParserRuleCall_2_2_1_0(), currentNode); 
	    }
		lv_generalization_5_0=ruleInlineGeneralization		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDerivationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"generalization",
	        		lv_generalization_5_0, 
	        		"InlineGeneralization", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	'{' 
    {
        createLeafNode(grammarAccess.getDerivationAccess().getLeftCurlyBracketKeyword_3(), null); 
    }
	'material:' 
    {
        createLeafNode(grammarAccess.getDerivationAccess().getMaterialKeyword_4(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDerivationAccess().getOwnedEndInlinePropertyDefinitionParserRuleCall_5_0_0(), currentNode); 
	    }
		lv_ownedEnd_8_0=ruleInlinePropertyDefinition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDerivationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedEnd",
	        		lv_ownedEnd_8_0, 
	        		"InlinePropertyDefinition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getDerivationAccess().getSemicolonKeyword_5_1(), null); 
    }
)	'relator:' 
    {
        createLeafNode(grammarAccess.getDerivationAccess().getRelatorKeyword_6(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDerivationAccess().getOwnedEndInlinePropertyDefinitionParserRuleCall_7_0_0(), currentNode); 
	    }
		lv_ownedEnd_11_0=ruleInlinePropertyDefinition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDerivationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedEnd",
	        		lv_ownedEnd_11_0, 
	        		"InlinePropertyDefinition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getDerivationAccess().getSemicolonKeyword_7_1(), null); 
    }
)	'}' 
    {
        createLeafNode(grammarAccess.getDerivationAccess().getRightCurlyBracketKeyword_8(), null); 
    }
)
;













// Entry rule entryRuleMaterialAssociation
entryRuleMaterialAssociation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMaterialAssociationRule(), currentNode); }
	 iv_ruleMaterialAssociation=ruleMaterialAssociation 
	 { $current=$iv_ruleMaterialAssociation.current; } 
	 EOF 
;

// Rule MaterialAssociation
ruleMaterialAssociation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getMaterialAssociationAccess().getMaterialAssociationAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getMaterialAssociationAccess().getMaterialAssociationAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getMaterialAssociationAccess().getUnorderedGroup_1());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getMaterialAssociationAccess().getUnorderedGroup_1(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getMaterialAssociationAccess().getUnorderedGroup_1(), 0);
	 				}
					(
(
		lv_isDerived_2_0=	'derived' 
    {
        createLeafNode(grammarAccess.getMaterialAssociationAccess().getIsDerivedDerivedKeyword_1_0_0(), "isDerived"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMaterialAssociationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isDerived", true, "derived", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getMaterialAssociationAccess().getUnorderedGroup_1());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getMaterialAssociationAccess().getUnorderedGroup_1(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getMaterialAssociationAccess().getUnorderedGroup_1(), 1);
	 				}
					(
(
		lv_isAbstract_3_0=	'abstract' 
    {
        createLeafNode(grammarAccess.getMaterialAssociationAccess().getIsAbstractAbstractKeyword_1_1_0(), "isAbstract"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMaterialAssociationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isAbstract", true, "abstract", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getMaterialAssociationAccess().getUnorderedGroup_1());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getMaterialAssociationAccess().getUnorderedGroup_1(), 2)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getMaterialAssociationAccess().getUnorderedGroup_1(), 2);
	 				}
					(
(
		lv_isLeaf_4_0=	'leaf' 
    {
        createLeafNode(grammarAccess.getMaterialAssociationAccess().getIsLeafLeafKeyword_1_2_0(), "isLeaf"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMaterialAssociationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isLeaf", true, "leaf", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getMaterialAssociationAccess().getUnorderedGroup_1());
	 				}
 				)
			)  

		)+
	  	{getUnorderedGroupHelper().canLeave(grammarAccess.getMaterialAssociationAccess().getUnorderedGroup_1())}?	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getMaterialAssociationAccess().getUnorderedGroup_1());
	}

)	'materialAssociation' 
    {
        createLeafNode(grammarAccess.getMaterialAssociationAccess().getMaterialAssociationKeyword_2(), null); 
    }
(
(
		lv_name_6_0=RULE_ID
		{
			createLeafNode(grammarAccess.getMaterialAssociationAccess().getNameIDTerminalRuleCall_3_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMaterialAssociationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_6_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(	':' 
    {
        createLeafNode(grammarAccess.getMaterialAssociationAccess().getColonKeyword_4_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMaterialAssociationAccess().getGeneralizationInlineGeneralizationParserRuleCall_4_1_0(), currentNode); 
	    }
		lv_generalization_8_0=ruleInlineGeneralization		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMaterialAssociationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"generalization",
	        		lv_generalization_8_0, 
	        		"InlineGeneralization", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getMaterialAssociationAccess().getCommaKeyword_4_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMaterialAssociationAccess().getGeneralizationInlineGeneralizationParserRuleCall_4_2_1_0(), currentNode); 
	    }
		lv_generalization_10_0=ruleInlineGeneralization		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMaterialAssociationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"generalization",
	        		lv_generalization_10_0, 
	        		"InlineGeneralization", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	'{' 
    {
        createLeafNode(grammarAccess.getMaterialAssociationAccess().getLeftCurlyBracketKeyword_5(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMaterialAssociationAccess().getOwnedEndInlinePropertyDefinitionParserRuleCall_6_0_0(), currentNode); 
	    }
		lv_ownedEnd_12_0=ruleInlinePropertyDefinition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMaterialAssociationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedEnd",
	        		lv_ownedEnd_12_0, 
	        		"InlinePropertyDefinition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getMaterialAssociationAccess().getSemicolonKeyword_6_1(), null); 
    }
)+	'}' 
    {
        createLeafNode(grammarAccess.getMaterialAssociationAccess().getRightCurlyBracketKeyword_7(), null); 
    }
)
;





// Entry rule entryRuleFormalAssociation
entryRuleFormalAssociation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFormalAssociationRule(), currentNode); }
	 iv_ruleFormalAssociation=ruleFormalAssociation 
	 { $current=$iv_ruleFormalAssociation.current; } 
	 EOF 
;

// Rule FormalAssociation
ruleFormalAssociation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getFormalAssociationAccess().getFormalAssociationAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getFormalAssociationAccess().getFormalAssociationAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getFormalAssociationAccess().getUnorderedGroup_1());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getFormalAssociationAccess().getUnorderedGroup_1(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getFormalAssociationAccess().getUnorderedGroup_1(), 0);
	 				}
					(
(
		lv_isAbstract_2_0=	'abstract' 
    {
        createLeafNode(grammarAccess.getFormalAssociationAccess().getIsAbstractAbstractKeyword_1_0_0(), "isAbstract"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFormalAssociationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isAbstract", true, "abstract", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getFormalAssociationAccess().getUnorderedGroup_1());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getFormalAssociationAccess().getUnorderedGroup_1(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getFormalAssociationAccess().getUnorderedGroup_1(), 1);
	 				}
					(
(
		lv_isDerived_3_0=	'derived' 
    {
        createLeafNode(grammarAccess.getFormalAssociationAccess().getIsDerivedDerivedKeyword_1_1_0(), "isDerived"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFormalAssociationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isDerived", true, "derived", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getFormalAssociationAccess().getUnorderedGroup_1());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getFormalAssociationAccess().getUnorderedGroup_1(), 2)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getFormalAssociationAccess().getUnorderedGroup_1(), 2);
	 				}
					(
(
		lv_isLeaf_4_0=	'leaf' 
    {
        createLeafNode(grammarAccess.getFormalAssociationAccess().getIsLeafLeafKeyword_1_2_0(), "isLeaf"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFormalAssociationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isLeaf", true, "leaf", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getFormalAssociationAccess().getUnorderedGroup_1());
	 				}
 				)
			)  

		)*	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getFormalAssociationAccess().getUnorderedGroup_1());
	}

)	'formalAssociation' 
    {
        createLeafNode(grammarAccess.getFormalAssociationAccess().getFormalAssociationKeyword_2(), null); 
    }
(
(
		lv_name_6_0=RULE_ID
		{
			createLeafNode(grammarAccess.getFormalAssociationAccess().getNameIDTerminalRuleCall_3_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFormalAssociationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_6_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?	'{' 
    {
        createLeafNode(grammarAccess.getFormalAssociationAccess().getLeftCurlyBracketKeyword_4(), null); 
    }
	'}' 
    {
        createLeafNode(grammarAccess.getFormalAssociationAccess().getRightCurlyBracketKeyword_5(), null); 
    }
)
;





// Entry rule entryRuleNonExpressionValue
entryRuleNonExpressionValue returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNonExpressionValueRule(), currentNode); }
	 iv_ruleNonExpressionValue=ruleNonExpressionValue 
	 { $current=$iv_ruleNonExpressionValue.current; } 
	 EOF 
;

// Rule NonExpressionValue
ruleNonExpressionValue returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getNonExpressionValueAccess().getLiteralIntegerParserRuleCall_0(), currentNode); 
    }
    this_LiteralInteger_0=ruleLiteralInteger
    { 
        $current = $this_LiteralInteger_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getNonExpressionValueAccess().getLiteralStringParserRuleCall_1(), currentNode); 
    }
    this_LiteralString_1=ruleLiteralString
    { 
        $current = $this_LiteralString_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getNonExpressionValueAccess().getLiteralNullParserRuleCall_2(), currentNode); 
    }
    this_LiteralNull_2=ruleLiteralNull
    { 
        $current = $this_LiteralNull_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getNonExpressionValueAccess().getLiteralBooleanParserRuleCall_3(), currentNode); 
    }
    this_LiteralBoolean_3=ruleLiteralBoolean
    { 
        $current = $this_LiteralBoolean_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getNonExpressionValueAccess().getInstanceValueParserRuleCall_4(), currentNode); 
    }
    this_InstanceValue_4=ruleInstanceValue
    { 
        $current = $this_InstanceValue_4.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleValueSpecification
entryRuleValueSpecification returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getValueSpecificationRule(), currentNode); }
	 iv_ruleValueSpecification=ruleValueSpecification 
	 { $current=$iv_ruleValueSpecification.current; } 
	 EOF 
;

// Rule ValueSpecification
ruleValueSpecification returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getValueSpecificationAccess().getNonExpressionValueParserRuleCall_0(), currentNode); 
    }
    this_NonExpressionValue_0=ruleNonExpressionValue
    { 
        $current = $this_NonExpressionValue_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getValueSpecificationAccess().getExpressionValueParserRuleCall_1(), currentNode); 
    }
    this_ExpressionValue_1=ruleExpressionValue
    { 
        $current = $this_ExpressionValue_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTypeRule(), currentNode); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeAccess().getDataTypeParserRuleCall_0(), currentNode); 
    }
    this_DataType_0=ruleDataType
    { 
        $current = $this_DataType_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeAccess().getPrimitiveTypeParserRuleCall_1(), currentNode); 
    }
    this_PrimitiveType_1=rulePrimitiveType
    { 
        $current = $this_PrimitiveType_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleDataType
entryRuleDataType returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDataTypeRule(), currentNode); }
	 iv_ruleDataType=ruleDataType 
	 { $current=$iv_ruleDataType.current; } 
	 EOF 
;

// Rule DataType
ruleDataType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'datatype' 
    {
        createLeafNode(grammarAccess.getDataTypeAccess().getDatatypeKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getDataTypeAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	':' 
    {
        createLeafNode(grammarAccess.getDataTypeAccess().getColonKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDataTypeAccess().getGeneralizationInlineGeneralizationParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_generalization_3_0=ruleInlineGeneralization		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"generalization",
	        		lv_generalization_3_0, 
	        		"InlineGeneralization", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getDataTypeAccess().getCommaKeyword_2_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDataTypeAccess().getGeneralizationInlineGeneralizationParserRuleCall_2_2_1_0(), currentNode); 
	    }
		lv_generalization_5_0=ruleInlineGeneralization		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"generalization",
	        		lv_generalization_5_0, 
	        		"InlineGeneralization", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?(	'{' 
    {
        createLeafNode(grammarAccess.getDataTypeAccess().getLeftCurlyBracketKeyword_3_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDataTypeAccess().getOwnedAttributeClassPropertyParserRuleCall_3_1_0_0(), currentNode); 
	    }
		lv_ownedAttribute_7_0=ruleClassProperty		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedAttribute",
	        		lv_ownedAttribute_7_0, 
	        		"ClassProperty", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getDataTypeAccess().getSemicolonKeyword_3_1_1(), null); 
    }
)+	'}' 
    {
        createLeafNode(grammarAccess.getDataTypeAccess().getRightCurlyBracketKeyword_3_2(), null); 
    }
)?)
;





// Entry rule entryRulePrimitiveType
entryRulePrimitiveType returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPrimitiveTypeRule(), currentNode); }
	 iv_rulePrimitiveType=rulePrimitiveType 
	 { $current=$iv_rulePrimitiveType.current; } 
	 EOF 
;

// Rule PrimitiveType
rulePrimitiveType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'type' 
    {
        createLeafNode(grammarAccess.getPrimitiveTypeAccess().getTypeKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getPrimitiveTypeAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimitiveTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	':' 
    {
        createLeafNode(grammarAccess.getPrimitiveTypeAccess().getColonKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrimitiveTypeAccess().getGeneralizationInlineGeneralizationParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_generalization_3_0=ruleInlineGeneralization		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimitiveTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"generalization",
	        		lv_generalization_3_0, 
	        		"InlineGeneralization", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getPrimitiveTypeAccess().getCommaKeyword_2_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrimitiveTypeAccess().getGeneralizationInlineGeneralizationParserRuleCall_2_2_1_0(), currentNode); 
	    }
		lv_generalization_5_0=ruleInlineGeneralization		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimitiveTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"generalization",
	        		lv_generalization_5_0, 
	        		"InlineGeneralization", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?)
;







// Entry rule entryRuleInlineGeneralization
entryRuleInlineGeneralization returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInlineGeneralizationRule(), currentNode); }
	 iv_ruleInlineGeneralization=ruleInlineGeneralization 
	 { $current=$iv_ruleInlineGeneralization.current; } 
	 EOF 
;

// Rule InlineGeneralization
ruleInlineGeneralization returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_isSubstitutable_0_0=	'substitutable' 
    {
        createLeafNode(grammarAccess.getInlineGeneralizationAccess().getIsSubstitutableSubstitutableKeyword_0_0(), "isSubstitutable"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInlineGeneralizationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isSubstitutable", true, "substitutable", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getInlineGeneralizationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getInlineGeneralizationAccess().getGeneralClassifierCrossReference_1_0(), "general"); 
	}

)
)(	'(' 
    {
        createLeafNode(grammarAccess.getInlineGeneralizationAccess().getLeftParenthesisKeyword_2_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getInlineGeneralizationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getInlineGeneralizationAccess().getGeneralizationSetGeneralizationSetCrossReference_2_1_0(), "generalizationSet"); 
	}

)
)(	',' 
    {
        createLeafNode(grammarAccess.getInlineGeneralizationAccess().getCommaKeyword_2_2_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getInlineGeneralizationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getInlineGeneralizationAccess().getGeneralizationSetGeneralizationSetCrossReference_2_2_1_0(), "generalizationSet"); 
	}

)
))*	')' 
    {
        createLeafNode(grammarAccess.getInlineGeneralizationAccess().getRightParenthesisKeyword_2_3(), null); 
    }
)?)
;







// Entry rule entryRuleGeneralizationSet
entryRuleGeneralizationSet returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getGeneralizationSetRule(), currentNode); }
	 iv_ruleGeneralizationSet=ruleGeneralizationSet 
	 { $current=$iv_ruleGeneralizationSet.current; } 
	 EOF 
;

// Rule GeneralizationSet
ruleGeneralizationSet returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getGeneralizationSetAccess().getUnorderedGroup_0());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getGeneralizationSetAccess().getUnorderedGroup_0(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getGeneralizationSetAccess().getUnorderedGroup_0(), 0);
	 				}
					(
(
		lv_isCovering_1_0=	'complete' 
    {
        createLeafNode(grammarAccess.getGeneralizationSetAccess().getIsCoveringCompleteKeyword_0_0_0(), "isCovering"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGeneralizationSetRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isCovering", true, "complete", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getGeneralizationSetAccess().getUnorderedGroup_0());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getGeneralizationSetAccess().getUnorderedGroup_0(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getGeneralizationSetAccess().getUnorderedGroup_0(), 1);
	 				}
					(
(
		lv_isDisjoint_2_0=	'disjoint' 
    {
        createLeafNode(grammarAccess.getGeneralizationSetAccess().getIsDisjointDisjointKeyword_0_1_0(), "isDisjoint"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGeneralizationSetRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isDisjoint", true, "disjoint", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getGeneralizationSetAccess().getUnorderedGroup_0());
	 				}
 				)
			)  

		)*	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getGeneralizationSetAccess().getUnorderedGroup_0());
	}

)	'generalizationSet' 
    {
        createLeafNode(grammarAccess.getGeneralizationSetAccess().getGeneralizationSetKeyword_1(), null); 
    }
(
(
		lv_name_4_0=RULE_ID
		{
			createLeafNode(grammarAccess.getGeneralizationSetAccess().getNameIDTerminalRuleCall_2_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGeneralizationSetRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_4_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'{' 
    {
        createLeafNode(grammarAccess.getGeneralizationSetAccess().getLeftCurlyBracketKeyword_3(), null); 
    }
	'}' 
    {
        createLeafNode(grammarAccess.getGeneralizationSetAccess().getRightCurlyBracketKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleExpressionSymbol
entryRuleExpressionSymbol returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExpressionSymbolRule(), currentNode); } 
	 iv_ruleExpressionSymbol=ruleExpressionSymbol 
	 { $current=$iv_ruleExpressionSymbol.current.getText(); }  
	 EOF 
;

// Rule ExpressionSymbol
ruleExpressionSymbol returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionSymbolAccess().getDefaultOperatorParserRuleCall_0(), currentNode); 
    }
    this_DefaultOperator_0=ruleDefaultOperator    {
		$current.merge(this_DefaultOperator_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

    |(
	kw='op' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getExpressionSymbolAccess().getOpKeyword_1_0(), null); 
    }

	kw='[' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getExpressionSymbolAccess().getLeftSquareBracketKeyword_1_1(), null); 
    }
    this_ID_3=RULE_ID    {
		$current.merge(this_ID_3);
    }

    { 
    createLeafNode(grammarAccess.getExpressionSymbolAccess().getIDTerminalRuleCall_1_2(), null); 
    }

	kw=']' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getExpressionSymbolAccess().getRightSquareBracketKeyword_1_3(), null); 
    }
))
    ;





// Entry rule entryRuleDefaultOperator
entryRuleDefaultOperator returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDefaultOperatorRule(), currentNode); } 
	 iv_ruleDefaultOperator=ruleDefaultOperator 
	 { $current=$iv_ruleDefaultOperator.current.getText(); }  
	 EOF 
;

// Rule DefaultOperator
ruleDefaultOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='+' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDefaultOperatorAccess().getPlusSignKeyword_0(), null); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDefaultOperatorAccess().getHyphenMinusKeyword_1(), null); 
    }

    |
	kw='*' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDefaultOperatorAccess().getAsteriskKeyword_2(), null); 
    }

    |
	kw='/' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDefaultOperatorAccess().getSolidusKeyword_3(), null); 
    }
)
    ;





// Entry rule entryRuleExpressionValue
entryRuleExpressionValue returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExpressionValueRule(), currentNode); }
	 iv_ruleExpressionValue=ruleExpressionValue 
	 { $current=$iv_ruleExpressionValue.current; } 
	 EOF 
;

// Rule ExpressionValue
ruleExpressionValue returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getExpressionValueAccess().getExpressionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getExpressionValueAccess().getExpressionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'(' 
    {
        createLeafNode(grammarAccess.getExpressionValueAccess().getLeftParenthesisKeyword_1(), null); 
    }
(((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpressionValueAccess().getOperandValueSpecificationParserRuleCall_2_0_0_0(), currentNode); 
	    }
		lv_operand_2_0=ruleValueSpecification		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"operand",
	        		lv_operand_2_0, 
	        		"ValueSpecification", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpressionValueAccess().getSymbolExpressionSymbolParserRuleCall_2_0_1_0(), currentNode); 
	    }
		lv_symbol_3_0=ruleExpressionSymbol		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"symbol",
	        		lv_symbol_3_0, 
	        		"ExpressionSymbol", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpressionValueAccess().getOperandValueSpecificationParserRuleCall_2_0_2_0(), currentNode); 
	    }
		lv_operand_4_0=ruleValueSpecification		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"operand",
	        		lv_operand_4_0, 
	        		"ValueSpecification", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpressionValueAccess().getSymbolExpressionSymbolParserRuleCall_2_1_0_0(), currentNode); 
	    }
		lv_symbol_5_0=ruleExpressionSymbol		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"symbol",
	        		lv_symbol_5_0, 
	        		"ExpressionSymbol", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpressionValueAccess().getOperandValueSpecificationParserRuleCall_2_1_1_0(), currentNode); 
	    }
		lv_operand_6_0=ruleValueSpecification		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"operand",
	        		lv_operand_6_0, 
	        		"ValueSpecification", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpressionValueAccess().getSymbolExpressionSymbolParserRuleCall_2_2_0_0(), currentNode); 
	    }
		lv_symbol_7_0=ruleExpressionSymbol		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"symbol",
	        		lv_symbol_7_0, 
	        		"ExpressionSymbol", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'{' 
    {
        createLeafNode(grammarAccess.getExpressionValueAccess().getLeftCurlyBracketKeyword_2_2_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpressionValueAccess().getOperandValueSpecificationParserRuleCall_2_2_2_0(), currentNode); 
	    }
		lv_operand_9_0=ruleValueSpecification		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"operand",
	        		lv_operand_9_0, 
	        		"ValueSpecification", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getExpressionValueAccess().getCommaKeyword_2_2_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpressionValueAccess().getOperandValueSpecificationParserRuleCall_2_2_3_1_0(), currentNode); 
	    }
		lv_operand_11_0=ruleValueSpecification		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"operand",
	        		lv_operand_11_0, 
	        		"ValueSpecification", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))+	'}' 
    {
        createLeafNode(grammarAccess.getExpressionValueAccess().getRightCurlyBracketKeyword_2_2_4(), null); 
    }
))	')' 
    {
        createLeafNode(grammarAccess.getExpressionValueAccess().getRightParenthesisKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleAnonymousPropertyDefinition
entryRuleAnonymousPropertyDefinition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAnonymousPropertyDefinitionRule(), currentNode); }
	 iv_ruleAnonymousPropertyDefinition=ruleAnonymousPropertyDefinition 
	 { $current=$iv_ruleAnonymousPropertyDefinition.current; } 
	 EOF 
;

// Rule AnonymousPropertyDefinition
ruleAnonymousPropertyDefinition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getAnonymousPropertyDefinitionAccess().getPropertyAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAnonymousPropertyDefinitionAccess().getPropertyAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getAnonymousPropertyDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getAnonymousPropertyDefinitionAccess().getTypeTypeCrossReference_1_0(), "type"); 
	}

)
)(	'[' 
    {
        createLeafNode(grammarAccess.getAnonymousPropertyDefinitionAccess().getLeftSquareBracketKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAnonymousPropertyDefinitionAccess().getLowerValueLiteralIntegerParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_lowerValue_3_0=ruleLiteralInteger		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAnonymousPropertyDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"lowerValue",
	        		lv_lowerValue_3_0, 
	        		"LiteralInteger", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'..' 
    {
        createLeafNode(grammarAccess.getAnonymousPropertyDefinitionAccess().getFullStopFullStopKeyword_2_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAnonymousPropertyDefinitionAccess().getUpperValueLiteralUnlimitedNaturalParserRuleCall_2_3_0(), currentNode); 
	    }
		lv_upperValue_5_0=ruleLiteralUnlimitedNatural		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAnonymousPropertyDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"upperValue",
	        		lv_upperValue_5_0, 
	        		"LiteralUnlimitedNatural", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	']' 
    {
        createLeafNode(grammarAccess.getAnonymousPropertyDefinitionAccess().getRightSquareBracketKeyword_2_4(), null); 
    }
)?)
;





// Entry rule entryRuleInlinePropertyDefinition
entryRuleInlinePropertyDefinition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInlinePropertyDefinitionRule(), currentNode); }
	 iv_ruleInlinePropertyDefinition=ruleInlinePropertyDefinition 
	 { $current=$iv_ruleInlinePropertyDefinition.current; } 
	 EOF 
;

// Rule InlinePropertyDefinition
ruleInlinePropertyDefinition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getInlinePropertyDefinitionAccess().getPropertyAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getInlinePropertyDefinitionAccess().getPropertyAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getInlinePropertyDefinitionAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInlinePropertyDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(	'(' 
    {
        createLeafNode(grammarAccess.getInlinePropertyDefinitionAccess().getLeftParenthesisKeyword_2_0(), null); 
    }
(

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getInlinePropertyDefinitionAccess().getUnorderedGroup_2_1());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getInlinePropertyDefinitionAccess().getUnorderedGroup_2_1(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getInlinePropertyDefinitionAccess().getUnorderedGroup_2_1(), 0);
	 				}
					(
(
		lv_isStatic_4_0=	'static' 
    {
        createLeafNode(grammarAccess.getInlinePropertyDefinitionAccess().getIsStaticStaticKeyword_2_1_0_0(), "isStatic"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInlinePropertyDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isStatic", true, "static", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getInlinePropertyDefinitionAccess().getUnorderedGroup_2_1());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getInlinePropertyDefinitionAccess().getUnorderedGroup_2_1(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getInlinePropertyDefinitionAccess().getUnorderedGroup_2_1(), 1);
	 				}
					(
(
		lv_isOrdered_5_0=	'ordered' 
    {
        createLeafNode(grammarAccess.getInlinePropertyDefinitionAccess().getIsOrderedOrderedKeyword_2_1_1_0(), "isOrdered"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInlinePropertyDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isOrdered", true, "ordered", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getInlinePropertyDefinitionAccess().getUnorderedGroup_2_1());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getInlinePropertyDefinitionAccess().getUnorderedGroup_2_1(), 2)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getInlinePropertyDefinitionAccess().getUnorderedGroup_2_1(), 2);
	 				}
					(
(
		lv_isUnique_6_0=	'unique' 
    {
        createLeafNode(grammarAccess.getInlinePropertyDefinitionAccess().getIsUniqueUniqueKeyword_2_1_2_0(), "isUnique"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInlinePropertyDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isUnique", true, "unique", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getInlinePropertyDefinitionAccess().getUnorderedGroup_2_1());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getInlinePropertyDefinitionAccess().getUnorderedGroup_2_1(), 3)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getInlinePropertyDefinitionAccess().getUnorderedGroup_2_1(), 3);
	 				}
					(
(
		lv_isReadOnly_7_0=	'read-only' 
    {
        createLeafNode(grammarAccess.getInlinePropertyDefinitionAccess().getIsReadOnlyReadOnlyKeyword_2_1_3_0(), "isReadOnly"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInlinePropertyDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isReadOnly", true, "read-only", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getInlinePropertyDefinitionAccess().getUnorderedGroup_2_1());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getInlinePropertyDefinitionAccess().getUnorderedGroup_2_1(), 4)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getInlinePropertyDefinitionAccess().getUnorderedGroup_2_1(), 4);
	 				}
					(
(
		lv_isDerivedUnion_8_0=	'derived-union' 
    {
        createLeafNode(grammarAccess.getInlinePropertyDefinitionAccess().getIsDerivedUnionDerivedUnionKeyword_2_1_4_0(), "isDerivedUnion"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInlinePropertyDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isDerivedUnion", true, "derived-union", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getInlinePropertyDefinitionAccess().getUnorderedGroup_2_1());
	 				}
 				)
			)  

		)*	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getInlinePropertyDefinitionAccess().getUnorderedGroup_2_1());
	}

)	')' 
    {
        createLeafNode(grammarAccess.getInlinePropertyDefinitionAccess().getRightParenthesisKeyword_2_2(), null); 
    }
)?(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getInlinePropertyDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getInlinePropertyDefinitionAccess().getTypeTypeCrossReference_3_0(), "type"); 
	}

)
)(	'[' 
    {
        createLeafNode(grammarAccess.getInlinePropertyDefinitionAccess().getLeftSquareBracketKeyword_4_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInlinePropertyDefinitionAccess().getLowerValueLiteralIntegerParserRuleCall_4_1_0(), currentNode); 
	    }
		lv_lowerValue_12_0=ruleLiteralInteger		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInlinePropertyDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"lowerValue",
	        		lv_lowerValue_12_0, 
	        		"LiteralInteger", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'..' 
    {
        createLeafNode(grammarAccess.getInlinePropertyDefinitionAccess().getFullStopFullStopKeyword_4_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInlinePropertyDefinitionAccess().getUpperValueLiteralUnlimitedNaturalParserRuleCall_4_3_0(), currentNode); 
	    }
		lv_upperValue_14_0=ruleLiteralUnlimitedNatural		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInlinePropertyDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"upperValue",
	        		lv_upperValue_14_0, 
	        		"LiteralUnlimitedNatural", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	']' 
    {
        createLeafNode(grammarAccess.getInlinePropertyDefinitionAccess().getRightSquareBracketKeyword_4_4(), null); 
    }
)?(	'{' 
    {
        createLeafNode(grammarAccess.getInlinePropertyDefinitionAccess().getLeftCurlyBracketKeyword_5_0(), null); 
    }
(	'defaults to' 
    {
        createLeafNode(grammarAccess.getInlinePropertyDefinitionAccess().getDefaultsToKeyword_5_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInlinePropertyDefinitionAccess().getDefaultValueValueSpecificationParserRuleCall_5_1_1_0(), currentNode); 
	    }
		lv_defaultValue_18_0=ruleValueSpecification		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInlinePropertyDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"defaultValue",
	        		lv_defaultValue_18_0, 
	        		"ValueSpecification", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?(	'aggregation' 
    {
        createLeafNode(grammarAccess.getInlinePropertyDefinitionAccess().getAggregationKeyword_5_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInlinePropertyDefinitionAccess().getAggregationAggregationKindEnumRuleCall_5_2_1_0(), currentNode); 
	    }
		lv_aggregation_20_0=ruleAggregationKind		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInlinePropertyDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"aggregation",
	        		lv_aggregation_20_0, 
	        		"AggregationKind", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?(	'subset of' 
    {
        createLeafNode(grammarAccess.getInlinePropertyDefinitionAccess().getSubsetOfKeyword_5_3_0(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getInlinePropertyDefinitionAccess().getLeftParenthesisKeyword_5_3_1(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getInlinePropertyDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getInlinePropertyDefinitionAccess().getSubsettedPropertyPropertyCrossReference_5_3_2_0(), "subsettedProperty"); 
	}

)
)(	',' 
    {
        createLeafNode(grammarAccess.getInlinePropertyDefinitionAccess().getCommaKeyword_5_3_3_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getInlinePropertyDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getInlinePropertyDefinitionAccess().getSubsettedPropertyPropertyCrossReference_5_3_3_1_0(), "subsettedProperty"); 
	}

)
))*	')' 
    {
        createLeafNode(grammarAccess.getInlinePropertyDefinitionAccess().getRightParenthesisKeyword_5_3_4(), null); 
    }
)?(	'redefines' 
    {
        createLeafNode(grammarAccess.getInlinePropertyDefinitionAccess().getRedefinesKeyword_5_4_0(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getInlinePropertyDefinitionAccess().getLeftParenthesisKeyword_5_4_1(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getInlinePropertyDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getInlinePropertyDefinitionAccess().getRedefinedPropertyPropertyCrossReference_5_4_2_0(), "redefinedProperty"); 
	}

)
)(	',' 
    {
        createLeafNode(grammarAccess.getInlinePropertyDefinitionAccess().getCommaKeyword_5_4_3_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getInlinePropertyDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getInlinePropertyDefinitionAccess().getRedefinedPropertyPropertyCrossReference_5_4_3_1_0(), "redefinedProperty"); 
	}

)
))*	')' 
    {
        createLeafNode(grammarAccess.getInlinePropertyDefinitionAccess().getRightParenthesisKeyword_5_4_4(), null); 
    }
)?	'}' 
    {
        createLeafNode(grammarAccess.getInlinePropertyDefinitionAccess().getRightCurlyBracketKeyword_5_5(), null); 
    }
)?)
;





// Entry rule entryRuleClassProperty
entryRuleClassProperty returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getClassPropertyRule(), currentNode); }
	 iv_ruleClassProperty=ruleClassProperty 
	 { $current=$iv_ruleClassProperty.current; } 
	 EOF 
;

// Rule ClassProperty
ruleClassProperty returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getClassPropertyAccess().getPropertyAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getClassPropertyAccess().getPropertyAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	'(' 
    {
        createLeafNode(grammarAccess.getClassPropertyAccess().getLeftParenthesisKeyword_1_0(), null); 
    }
(

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getClassPropertyAccess().getUnorderedGroup_1_1());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getClassPropertyAccess().getUnorderedGroup_1_1(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getClassPropertyAccess().getUnorderedGroup_1_1(), 0);
	 				}
					(
(
		lv_isStatic_3_0=	'static' 
    {
        createLeafNode(grammarAccess.getClassPropertyAccess().getIsStaticStaticKeyword_1_1_0_0(), "isStatic"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isStatic", true, "static", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getClassPropertyAccess().getUnorderedGroup_1_1());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getClassPropertyAccess().getUnorderedGroup_1_1(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getClassPropertyAccess().getUnorderedGroup_1_1(), 1);
	 				}
					(
(
		lv_isOrdered_4_0=	'ordered' 
    {
        createLeafNode(grammarAccess.getClassPropertyAccess().getIsOrderedOrderedKeyword_1_1_1_0(), "isOrdered"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isOrdered", true, "ordered", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getClassPropertyAccess().getUnorderedGroup_1_1());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getClassPropertyAccess().getUnorderedGroup_1_1(), 2)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getClassPropertyAccess().getUnorderedGroup_1_1(), 2);
	 				}
					(
(
		lv_isUnique_5_0=	'unique' 
    {
        createLeafNode(grammarAccess.getClassPropertyAccess().getIsUniqueUniqueKeyword_1_1_2_0(), "isUnique"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isUnique", true, "unique", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getClassPropertyAccess().getUnorderedGroup_1_1());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getClassPropertyAccess().getUnorderedGroup_1_1(), 3)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getClassPropertyAccess().getUnorderedGroup_1_1(), 3);
	 				}
					(
(
		lv_isReadOnly_6_0=	'read-only' 
    {
        createLeafNode(grammarAccess.getClassPropertyAccess().getIsReadOnlyReadOnlyKeyword_1_1_3_0(), "isReadOnly"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isReadOnly", true, "read-only", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getClassPropertyAccess().getUnorderedGroup_1_1());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getClassPropertyAccess().getUnorderedGroup_1_1(), 4)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getClassPropertyAccess().getUnorderedGroup_1_1(), 4);
	 				}
					(
(
		lv_isDerivedUnion_7_0=	'derived-union' 
    {
        createLeafNode(grammarAccess.getClassPropertyAccess().getIsDerivedUnionDerivedUnionKeyword_1_1_4_0(), "isDerivedUnion"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isDerivedUnion", true, "derived-union", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getClassPropertyAccess().getUnorderedGroup_1_1());
	 				}
 				)
			)  

		)*	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getClassPropertyAccess().getUnorderedGroup_1_1());
	}

)	')' 
    {
        createLeafNode(grammarAccess.getClassPropertyAccess().getRightParenthesisKeyword_1_2(), null); 
    }
)?	'property' 
    {
        createLeafNode(grammarAccess.getClassPropertyAccess().getPropertyKeyword_2(), null); 
    }
(
(
		lv_name_10_0=RULE_ID
		{
			createLeafNode(grammarAccess.getClassPropertyAccess().getNameIDTerminalRuleCall_3_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_10_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	'[' 
    {
        createLeafNode(grammarAccess.getClassPropertyAccess().getLeftSquareBracketKeyword_4_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClassPropertyAccess().getLowerValueLiteralIntegerParserRuleCall_4_1_0(), currentNode); 
	    }
		lv_lowerValue_12_0=ruleLiteralInteger		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"lowerValue",
	        		lv_lowerValue_12_0, 
	        		"LiteralInteger", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'..' 
    {
        createLeafNode(grammarAccess.getClassPropertyAccess().getFullStopFullStopKeyword_4_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClassPropertyAccess().getUpperValueLiteralUnlimitedNaturalParserRuleCall_4_3_0(), currentNode); 
	    }
		lv_upperValue_14_0=ruleLiteralUnlimitedNatural		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"upperValue",
	        		lv_upperValue_14_0, 
	        		"LiteralUnlimitedNatural", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	']' 
    {
        createLeafNode(grammarAccess.getClassPropertyAccess().getRightSquareBracketKeyword_4_4(), null); 
    }
)?	':' 
    {
        createLeafNode(grammarAccess.getClassPropertyAccess().getColonKeyword_5(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getClassPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getClassPropertyAccess().getTypeTypeCrossReference_6_0(), "type"); 
	}

)
)(	'{' 
    {
        createLeafNode(grammarAccess.getClassPropertyAccess().getLeftCurlyBracketKeyword_7_0(), null); 
    }
(	'defaults to' 
    {
        createLeafNode(grammarAccess.getClassPropertyAccess().getDefaultsToKeyword_7_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClassPropertyAccess().getDefaultValueValueSpecificationParserRuleCall_7_1_1_0(), currentNode); 
	    }
		lv_defaultValue_20_0=ruleValueSpecification		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"defaultValue",
	        		lv_defaultValue_20_0, 
	        		"ValueSpecification", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?(	'aggregation' 
    {
        createLeafNode(grammarAccess.getClassPropertyAccess().getAggregationKeyword_7_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClassPropertyAccess().getAggregationAggregationKindEnumRuleCall_7_2_1_0(), currentNode); 
	    }
		lv_aggregation_22_0=ruleAggregationKind		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"aggregation",
	        		lv_aggregation_22_0, 
	        		"AggregationKind", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?(	'subset of' 
    {
        createLeafNode(grammarAccess.getClassPropertyAccess().getSubsetOfKeyword_7_3_0(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getClassPropertyAccess().getLeftParenthesisKeyword_7_3_1(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getClassPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getClassPropertyAccess().getSubsettedPropertyPropertyCrossReference_7_3_2_0(), "subsettedProperty"); 
	}

)
)(	',' 
    {
        createLeafNode(grammarAccess.getClassPropertyAccess().getCommaKeyword_7_3_3_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getClassPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getClassPropertyAccess().getSubsettedPropertyPropertyCrossReference_7_3_3_1_0(), "subsettedProperty"); 
	}

)
))*	')' 
    {
        createLeafNode(grammarAccess.getClassPropertyAccess().getRightParenthesisKeyword_7_3_4(), null); 
    }
)?(	'redefines' 
    {
        createLeafNode(grammarAccess.getClassPropertyAccess().getRedefinesKeyword_7_4_0(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getClassPropertyAccess().getLeftParenthesisKeyword_7_4_1(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getClassPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getClassPropertyAccess().getRedefinedPropertyPropertyCrossReference_7_4_2_0(), "redefinedProperty"); 
	}

)
)(	',' 
    {
        createLeafNode(grammarAccess.getClassPropertyAccess().getCommaKeyword_7_4_3_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getClassPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getClassPropertyAccess().getRedefinedPropertyPropertyCrossReference_7_4_3_1_0(), "redefinedProperty"); 
	}

)
))*	')' 
    {
        createLeafNode(grammarAccess.getClassPropertyAccess().getRightParenthesisKeyword_7_4_4(), null); 
    }
)?	'}' 
    {
        createLeafNode(grammarAccess.getClassPropertyAccess().getRightCurlyBracketKeyword_7_5(), null); 
    }
)?)
;





// Entry rule entryRuleEnumeration
entryRuleEnumeration returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEnumerationRule(), currentNode); }
	 iv_ruleEnumeration=ruleEnumeration 
	 { $current=$iv_ruleEnumeration.current; } 
	 EOF 
;

// Rule Enumeration
ruleEnumeration returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'enum' 
    {
        createLeafNode(grammarAccess.getEnumerationAccess().getEnumKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getEnumerationAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumerationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'{' 
    {
        createLeafNode(grammarAccess.getEnumerationAccess().getLeftCurlyBracketKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEnumerationAccess().getOwnedLiteralEnumerationLiteralParserRuleCall_3_0(), currentNode); 
	    }
		lv_ownedLiteral_3_0=ruleEnumerationLiteral		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumerationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedLiteral",
	        		lv_ownedLiteral_3_0, 
	        		"EnumerationLiteral", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getEnumerationAccess().getCommaKeyword_4_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEnumerationAccess().getOwnedLiteralEnumerationLiteralParserRuleCall_4_1_0(), currentNode); 
	    }
		lv_ownedLiteral_5_0=ruleEnumerationLiteral		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumerationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedLiteral",
	        		lv_ownedLiteral_5_0, 
	        		"EnumerationLiteral", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'}' 
    {
        createLeafNode(grammarAccess.getEnumerationAccess().getRightCurlyBracketKeyword_5(), null); 
    }
)
;





// Entry rule entryRuleEnumerationLiteral
entryRuleEnumerationLiteral returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEnumerationLiteralRule(), currentNode); }
	 iv_ruleEnumerationLiteral=ruleEnumerationLiteral 
	 { $current=$iv_ruleEnumerationLiteral.current; } 
	 EOF 
;

// Rule EnumerationLiteral
ruleEnumerationLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getEnumerationLiteralAccess().getEnumerationLiteralAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getEnumerationLiteralAccess().getEnumerationLiteralAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getEnumerationLiteralAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumerationLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'=' 
    {
        createLeafNode(grammarAccess.getEnumerationLiteralAccess().getEqualsSignKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEnumerationLiteralAccess().getSpecificationValueSpecificationParserRuleCall_3_0(), currentNode); 
	    }
		lv_specification_3_0=ruleValueSpecification		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumerationLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"specification",
	        		lv_specification_3_0, 
	        		"ValueSpecification", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;







// Entry rule entryRuleSlot
entryRuleSlot returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSlotRule(), currentNode); }
	 iv_ruleSlot=ruleSlot 
	 { $current=$iv_ruleSlot.current; } 
	 EOF 
;

// Rule Slot
ruleSlot returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getSlotRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getSlotAccess().getDefiningFeatureStructuralFeatureCrossReference_0_0(), "definingFeature"); 
	}

)
)	'=>' 
    {
        createLeafNode(grammarAccess.getSlotAccess().getEqualsSignGreaterThanSignKeyword_1(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSlotAccess().getValueValueSpecificationParserRuleCall_2_0_0(), currentNode); 
	    }
		lv_value_2_0=ruleValueSpecification		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSlotRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"value",
	        		lv_value_2_0, 
	        		"ValueSpecification", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(	'[' 
    {
        createLeafNode(grammarAccess.getSlotAccess().getLeftSquareBracketKeyword_2_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSlotAccess().getValueValueSpecificationParserRuleCall_2_1_1_0(), currentNode); 
	    }
		lv_value_4_0=ruleValueSpecification		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSlotRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"value",
	        		lv_value_4_0, 
	        		"ValueSpecification", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getSlotAccess().getCommaKeyword_2_1_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSlotAccess().getValueValueSpecificationParserRuleCall_2_1_2_1_0(), currentNode); 
	    }
		lv_value_6_0=ruleValueSpecification		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSlotRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"value",
	        		lv_value_6_0, 
	        		"ValueSpecification", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	']' 
    {
        createLeafNode(grammarAccess.getSlotAccess().getRightSquareBracketKeyword_2_1_3(), null); 
    }
)))
;





// Entry rule entryRuleInstanceValue
entryRuleInstanceValue returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInstanceValueRule(), currentNode); }
	 iv_ruleInstanceValue=ruleInstanceValue 
	 { $current=$iv_ruleInstanceValue.current; } 
	 EOF 
;

// Rule InstanceValue
ruleInstanceValue returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getInstanceValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getInstanceValueAccess().getInstanceInstanceSpecificationCrossReference_0_0(), "instance"); 
	}

)
)(	'(' 
    {
        createLeafNode(grammarAccess.getInstanceValueAccess().getLeftParenthesisKeyword_1_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getInstanceValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getInstanceValueAccess().getTypeTypeCrossReference_1_1_0(), "type"); 
	}

)
)	')' 
    {
        createLeafNode(grammarAccess.getInstanceValueAccess().getRightParenthesisKeyword_1_2(), null); 
    }
)?)
;





// Entry rule entryRuleLiteralInteger
entryRuleLiteralInteger returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLiteralIntegerRule(), currentNode); }
	 iv_ruleLiteralInteger=ruleLiteralInteger 
	 { $current=$iv_ruleLiteralInteger.current; } 
	 EOF 
;

// Rule LiteralInteger
ruleLiteralInteger returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getLiteralIntegerAccess().getLiteralIntegerAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getLiteralIntegerAccess().getLiteralIntegerAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_value_1_0=RULE_INT
		{
			createLeafNode(grammarAccess.getLiteralIntegerAccess().getValueINTTerminalRuleCall_1_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralIntegerRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_1_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleLiteralString
entryRuleLiteralString returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLiteralStringRule(), currentNode); }
	 iv_ruleLiteralString=ruleLiteralString 
	 { $current=$iv_ruleLiteralString.current; } 
	 EOF 
;

// Rule LiteralString
ruleLiteralString returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getLiteralStringAccess().getLiteralStringAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getLiteralStringAccess().getLiteralStringAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_value_1_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getLiteralStringAccess().getValueSTRINGTerminalRuleCall_1_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralStringRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_1_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleLiteralBoolean
entryRuleLiteralBoolean returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLiteralBooleanRule(), currentNode); }
	 iv_ruleLiteralBoolean=ruleLiteralBoolean 
	 { $current=$iv_ruleLiteralBoolean.current; } 
	 EOF 
;

// Rule LiteralBoolean
ruleLiteralBoolean returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getLiteralBooleanAccess().getLiteralBooleanAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getLiteralBooleanAccess().getLiteralBooleanAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLiteralBooleanAccess().getValueBooleanParserRuleCall_1_0(), currentNode); 
	    }
		lv_value_1_0=ruleBoolean		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralBooleanRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_1_0, 
	        		"Boolean", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleBoolean
entryRuleBoolean returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBooleanRule(), currentNode); } 
	 iv_ruleBoolean=ruleBoolean 
	 { $current=$iv_ruleBoolean.current.getText(); }  
	 EOF 
;

// Rule Boolean
ruleBoolean returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='true' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getBooleanAccess().getTrueKeyword_0(), null); 
    }

    |
	kw='false' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getBooleanAccess().getFalseKeyword_1(), null); 
    }
)
    ;





// Entry rule entryRuleLiteralUnlimitedNatural
entryRuleLiteralUnlimitedNatural returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLiteralUnlimitedNaturalRule(), currentNode); }
	 iv_ruleLiteralUnlimitedNatural=ruleLiteralUnlimitedNatural 
	 { $current=$iv_ruleLiteralUnlimitedNatural.current; } 
	 EOF 
;

// Rule LiteralUnlimitedNatural
ruleLiteralUnlimitedNatural returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLiteralUnlimitedNaturalAccess().getValueUnlimitedNaturalValueParserRuleCall_0_0(), currentNode); 
	    }
		lv_value_0_0=ruleUnlimitedNaturalValue		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralUnlimitedNaturalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"UnlimitedNaturalValue", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		lv_value_1_0=RULE_INT
		{
			createLeafNode(grammarAccess.getLiteralUnlimitedNaturalAccess().getValueINTTerminalRuleCall_1_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralUnlimitedNaturalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_1_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleUnlimitedNaturalValue
entryRuleUnlimitedNaturalValue returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUnlimitedNaturalValueRule(), currentNode); } 
	 iv_ruleUnlimitedNaturalValue=ruleUnlimitedNaturalValue 
	 { $current=$iv_ruleUnlimitedNaturalValue.current.getText(); }  
	 EOF 
;

// Rule UnlimitedNaturalValue
ruleUnlimitedNaturalValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:

	kw='*' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnlimitedNaturalValueAccess().getAsteriskKeyword(), null); 
    }

    ;





// Entry rule entryRuleLiteralNull
entryRuleLiteralNull returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLiteralNullRule(), currentNode); }
	 iv_ruleLiteralNull=ruleLiteralNull 
	 { $current=$iv_ruleLiteralNull.current; } 
	 EOF 
;

// Rule LiteralNull
ruleLiteralNull returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getLiteralNullAccess().getLiteralNullAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getLiteralNullAccess().getLiteralNullAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'NULL' 
    {
        createLeafNode(grammarAccess.getLiteralNullAccess().getNULLKeyword_1(), null); 
    }
)
;





// Rule AggregationKind
ruleAggregationKind returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'none' 
	{
        $current = grammarAccess.getAggregationKindAccess().getNoneEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAggregationKindAccess().getNoneEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'shared' 
	{
        $current = grammarAccess.getAggregationKindAccess().getSharedEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAggregationKindAccess().getSharedEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'composite' 
	{
        $current = grammarAccess.getAggregationKindAccess().getCompositeEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAggregationKindAccess().getCompositeEnumLiteralDeclaration_2(), null); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


